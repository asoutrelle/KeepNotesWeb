// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createFolder = `-- name: CreateFolder :one
INSERT INTO folders (name, description, parent_folder_id)
VALUES ($1, $2, $3)
RETURNING id, name, description, parent_folder_id, created_at
`

type CreateFolderParams struct {
	Name           string
	Description    sql.NullString
	ParentFolderID sql.NullInt32
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (Folder, error) {
	row := q.db.QueryRowContext(ctx, createFolder, arg.Name, arg.Description, arg.ParentFolderID)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ParentFolderID,
		&i.CreatedAt,
	)
	return i, err
}

const createNote = `-- name: CreateNote :one
INSERT INTO notes (title, body, folder_id)
VALUES ($1, $2, $3)
RETURNING id, title, body, folder_id, created_at
`

type CreateNoteParams struct {
	Title    string
	Body     sql.NullString
	FolderID sql.NullInt32
}

type CreateNoteRow struct {
	ID        int32
	Title     string
	Body      sql.NullString
	FolderID  sql.NullInt32
	CreatedAt sql.NullTime
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (CreateNoteRow, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.Title, arg.Body, arg.FolderID)
	var i CreateNoteRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.FolderID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFolder = `-- name: DeleteFolder :exec
DELETE FROM folders
WHERE id = $1
`

func (q *Queries) DeleteFolder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFolder, id)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getFolder = `-- name: GetFolder :one
SELECT id, name, description, parent_folder_id, created_at
FROM folders
WHERE id = $1
`

func (q *Queries) GetFolder(ctx context.Context, id int32) (Folder, error) {
	row := q.db.QueryRowContext(ctx, getFolder, id)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ParentFolderID,
		&i.CreatedAt,
	)
	return i, err
}

const getNote = `-- name: GetNote :one
SELECT id, title, body, created_at
FROM notes
WHERE id = $1
`

type GetNoteRow struct {
	ID        int32
	Title     string
	Body      sql.NullString
	CreatedAt sql.NullTime
}

func (q *Queries) GetNote(ctx context.Context, id int32) (GetNoteRow, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i GetNoteRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const listFolders = `-- name: ListFolders :many
SELECT id, name, description, parent_folder_id, created_at
FROM folders
ORDER BY name
`

func (q *Queries) ListFolders(ctx context.Context) ([]Folder, error) {
	rows, err := q.db.QueryContext(ctx, listFolders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ParentFolderID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotes = `-- name: ListNotes :many
SELECT id, title, body, created_at
FROM notes
ORDER BY title
`

type ListNotesRow struct {
	ID        int32
	Title     string
	Body      sql.NullString
	CreatedAt sql.NullTime
}

func (q *Queries) ListNotes(ctx context.Context) ([]ListNotesRow, error) {
	rows, err := q.db.QueryContext(ctx, listNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNotesRow
	for rows.Next() {
		var i ListNotesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFolder = `-- name: UpdateFolder :exec
UPDATE folders
SET name = $2, description = $3, parent_folder_id = $4
WHERE id = $1
`

type UpdateFolderParams struct {
	ID             int32
	Name           string
	Description    sql.NullString
	ParentFolderID sql.NullInt32
}

func (q *Queries) UpdateFolder(ctx context.Context, arg UpdateFolderParams) error {
	_, err := q.db.ExecContext(ctx, updateFolder,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ParentFolderID,
	)
	return err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET title = $2, body = $3, folder_id = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateNoteParams struct {
	ID       int32
	Title    string
	Body     sql.NullString
	FolderID sql.NullInt32
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.FolderID,
	)
	return err
}
